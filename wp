local library = loadstring(game:HttpGet('https://raw.githubusercontent.com/cueshut/saves/main/criminality%20paste%20ui%20library'))()

local window = library.new('Winnex.pub | Build: [18.07.24] | Status: Free', 'leadmarker')
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local username = Player.Name
local userId = Player.UserId
game.StarterGui:SetCore("SendNotification", {
    Title = "Winnex.pub";
    Text = "Welcome to Winnex.pub! Build: [18.07.24]";
    Icon = "RBXID OR BLANK";
    Duration = "5";
})
local tab1 = window.new_tab('rbxassetid://18500740287')
local tab2 = window.new_tab('rbxassetid://18501164834')
local tab3 = window.new_tab('rbxassetid://18501478053')
local tab = window.new_tab('rbxassetid://18501056637')

local section1 = tab1.new_section('Legit')

local sector1 = section1.new_sector('Torso Hitbox', 'Left')

local HitboxExpanderTorso = {
Size = 1,
Enabled = false,
Transparency = 0.5,  
Color = Color3.fromRGB(84, 101, 255)
}

local HitboxExpanderHead = {
Size = 1,
Enabled = false,
Transparency = 0.5,  
Color = Color3.fromRGB(84, 101, 255)
}

local OriginalSizes = {}
local hitboxConnections = {}

local function expandHitbox(model, partName, size, transparency)
local part = model:FindFirstChild(partName)
if part then
if not OriginalSizes[model] then
OriginalSizes[model] = {}
end

if not OriginalSizes[model][part.Name] then
OriginalSizes[model][part.Name] = part.Size
end

part.Size = Vector3.new(size, size, size)
part.Transparency = transparency
part.CanCollide = false


part.Color = HitboxExpanderTorso.Color
end
end

local function resetHitbox(model, partName)
local part = model:FindFirstChild(partName)
if part and OriginalSizes[model] and OriginalSizes[model][part.Name] then
part.Size = OriginalSizes[model][part.Name]
part.Transparency = 0
part.CanCollide = true

end
end

local function updateHitboxes()
for _, model in pairs(game:GetService("Workspace"):GetChildren()) do
if model:IsA("Model") and model:FindFirstChild("Torso") then
resetHitbox(model, "Torso")

if HitboxExpanderTorso.Enabled then
expandHitbox(model, "Torso", HitboxExpanderTorso.Size, HitboxExpanderTorso.Transparency)
end
end
if model:IsA("Model") and model:FindFirstChild("Head") then
resetHitbox(model, "Head")

if HitboxExpanderHead.Enabled then
expandHitbox(model, "Head", HitboxExpanderHead.Size, HitboxExpanderHead.Transparency)
end
end
end
end

local function enableHitboxExpansion()
updateHitboxes()
table.insert(hitboxConnections, game:GetService("RunService").RenderStepped:Connect(updateHitboxes))
end

local function disableHitboxExpansion()
for  model in pairs(game:GetService("Workspace"):GetChildren()) do
if model:IsA("Model") and model:FindFirstChild("Torso") then
resetHitbox(model, "Torso")
end
if model:IsA("Model") and model:FindFirstChild("Head") then
resetHitbox(model, "Head")
end
end

for  connection in pairs(hitboxConnections) do
if connection then
connection:Disconnect()
end
end
hitboxConnections = {}
end


local toggle = sector1.element('Toggle', 'Enable', false, function(v)
HitboxExpanderTorso.Enabled = v.Toggle
if v.Toggle then
enableHitboxExpansion()
else
disableHitboxExpansion()
end
print("Torso Hitbox Enabled: ", HitboxExpanderTorso.Enabled)
end)


toggle:add_color({Color = Color3.fromRGB(84, 101, 255)}, nil, function(v)
HitboxExpanderTorso.Color = v.Color
print("Torso Color: ", v.Color)
if HitboxExpanderTorso.Enabled then
updateHitboxes()
end
end)


sector1.element('Slider', 'Size', {default = {min = 1, max = 7, default = 1}}, function(v)
HitboxExpanderTorso.Size = v.Slider
print("Torso Size: ", v.Slider)
if HitboxExpanderTorso.Enabled then
updateHitboxes()
end
end)


if HitboxExpanderTorso.Enabled then
enableHitboxExpansion()
end

local section2 = tab1.new_section('Rage')

local sector2 = section2.new_sector('Head Hitbox', 'Left')


local toggle = sector2.element('Toggle', 'Enable', false, function(v)
HitboxExpanderHead.Enabled = v.Toggle
if v.Toggle then
enableHitboxExpansion()
else
disableHitboxExpansion()
end
print("Head Hitbox Enabled: ", HitboxExpanderHead.Enabled)
end)


toggle:add_color({Color = Color3.fromRGB(84, 101, 255)}, nil, function(v)
HitboxExpanderHead.Color = v.Color
print("Head Color: ", v.Color)
if HitboxExpanderHead.Enabled then
updateHitboxes()
end
end)


sector2.element('Slider', 'Size', {default = {min = 1, max = 7, default = 1}}, function(v)
HitboxExpanderHead.Size = v.Slider
print("Head Size: ", v.Slider)
if HitboxExpanderHead.Enabled then
updateHitboxes()
end
end)


if HitboxExpanderHead.Enabled then
enableHitboxExpansion()
end

local section1 = tab2.new_section('Enemy')

local sector = section1.new_sector('Box', 'Left')


local toggle = sector.element('Toggle', 'Enable', false, function(v)
   print(v.Toggle) 
end)
toggle:add_color({Color = Color3.fromRGB(84, 101, 255)}, nil, function(v)
   print(v.Color)    
end)

local toggle = sector.element('Toggle', 'Filled', false, function(v)
   print(v.Toggle) 
end)

local toggle = sector.element('Toggle', 'Distance', false, function(v)
   print(v.Toggle) 
end)

local toggle = sector.element('Toggle', 'Name', false, function(v)
   print(v.Toggle) 
end)

local toggle = sector.element('Toggle', 'Sleeper check', false, function(v)
   print(v.Toggle) 
end)

local sector1 = section1.new_sector('Chams', 'Right')

local toggle = sector1.element('Toggle', 'Enable', false, function(v)
   print(v.Toggle) 
end)
toggle:add_color({Color = Color3.fromRGB(84, 101, 255)}, nil, function(v)
   print(v.Color)    
end)

local section1 = tab2.new_section('Player')
local sector = section1.new_sector('Crosshair', 'Left')

local crosshairEnabled = false
local crosshairSpinEnabled = false
local crosshairColor = Color3.fromRGB(84, 101, 255)
local spinSpeed = 1
local crosshairSize = 8

local toggleEnable = sector.element('Toggle', 'Enable', false, function(v)
crosshairEnabled = v.Toggle
print("Crosshair Enabled: ", crosshairEnabled)
if not crosshairEnabled then
HorizontalLine.Visible = false
VerticalLine.Visible = false
TextLabel.Visible = false
else
HorizontalLine.Visible = true
VerticalLine.Visible = true
TextLabel.Visible = true
updateCrosshair()
end
end)

toggleEnable:add_color({Color = Color3.fromRGB(84, 101, 255)}, nil, function(v)
crosshairColor = v.Color
print("Crosshair Color: ", v.Color)

HorizontalLine.Color = crosshairColor
VerticalLine.Color = crosshairColor
end)

local toggleSpin = sector.element('Toggle', 'Crosshair Spin', false, function(v)
crosshairSpinEnabled = v.Toggle
print("Crosshair Spin Enabled: ", crosshairSpinEnabled)
end)

local sliderSpinSpeed = sector.element('Slider', 'Spin Speed', {default = {min = 0, max = 10, default = 1}}, function(v)
spinSpeed = v.Slider
print("Spin Speed: ", spinSpeed)
end)

local sliderSize = sector.element('Slider', 'Crosshair Size', {default = {min = 1, max = 20, default = 8}}, function(v)
crosshairSize = v.Slider
print("Crosshair Size: ", crosshairSize)
updateCrosshair()
end)


local cam = workspace.CurrentCamera or workspace:FindFirstChildOfClass("Camera")
local RunService = game:GetService("RunService")


local function draw(type, properties)
local obj = Drawing.new(type)
for i, v in pairs(properties) do
obj[i] = v
end
return obj
end


local HorizontalLine = draw("Line", {
From = Vector2.new(0, 0),
To = Vector2.new(0, 0),
Thickness = 1,
Color = crosshairColor,
Transparency = 1,
Visible = false
})

local VerticalLine = draw("Line", {
From = Vector2.new(0, 0),
To = Vector2.new(0, 0),
Thickness = 1,
Color = crosshairColor,
Transparency = 1,
Visible = false
})


local TextLabel = draw("Text", {
Text = "Winnex.pub",
Size = 15,
Center = true,
Outline = true,
Color = crosshairColor,
Transparency = 1,
Visible = false
})


local function updateCrosshair()
if not crosshairEnabled then
HorizontalLine.Visible = false
VerticalLine.Visible = false
TextLabel.Visible = false
return
end

HorizontalLine.Color = crosshairColor
VerticalLine.Color = crosshairColor
TextLabel.Color = crosshairColor

local Real_Size = crosshairSize  
local centerX = cam.ViewportSize.x / 2
local centerY = cam.ViewportSize.y / 2

if crosshairSpinEnabled then
local angle = tick() * spinSpeed
HorizontalLine.From = Vector2.new(centerX + math.cos(angle) * Real_Size, centerY + math.sin(angle) * Real_Size)
HorizontalLine.To = Vector2.new(centerX - math.cos(angle) * Real_Size, centerY - math.sin(angle) * Real_Size)
VerticalLine.From = Vector2.new(centerX - math.sin(angle) * Real_Size, centerY + math.cos(angle) * Real_Size)
VerticalLine.To = Vector2.new(centerX + math.sin(angle) * Real_Size, centerY - math.cos(angle) * Real_Size)
else
HorizontalLine.From = Vector2.new(centerX - Real_Size, centerY)
HorizontalLine.To = Vector2.new(centerX + Real_Size, centerY)

VerticalLine.From = Vector2.new(centerX, centerY - Real_Size)
VerticalLine.To = Vector2.new(centerX, centerY + Real_Size)
end

HorizontalLine.Visible = true
VerticalLine.Visible = true


TextLabel.Position = Vector2.new(centerX, centerY + Real_Size + 15)
TextLabel.Visible = true
end


RunService.RenderStepped:Connect(updateCrosshair)

cam:GetPropertyChangedSignal("ViewportSize"):Connect(function()
updateCrosshair()
end)

local section = tab.new_section('Fullbright')

local sector = section.new_sector('Lighting', 'Left')

local section2 = tab3.new_section('Player')
local sector2 = section2.new_sector('Misc', 'Left')

local toggle = sector2.element('Toggle', 'Long Neck', false, function(v)
print(v.Toggle)
end)





local toggle = sector2.element('Toggle', 'Xray', false, function(v)
print(v.Toggle)
end)

local slider = sector2.element('Slider', 'Xray Transparency', {default = {min = 0, max = 1, default = 0}}, function(v)
print(v.Slider)
end)

local sector3 = section2.new_sector('Visual', 'Right')




local section1 = tab3.new_section('Hitsound')

local sector2 = section1.new_sector('Hitsound', 'Left')

local toggle = sector2.element('Toggle', 'Enable', false, function(v)
print(v.Toggle)
end)

local combo = sector2.element('Combo', 'Part', {options = {'Head', 'Torso'}}, function(v)
print(v.Combo)
end)

local dropdown = sector2.element('Dropdown', 'Sounds', {options = {'Rust', 'Bell', 'Minecraft', 'Meow', 'Neverlose', 'TF2', 'Bonk', 'CSGO'}}, function(v)
print(v.Dropdown)
end)

local slider = sector2.element('Slider', 'Volume', {default = {min = 0, max = 10, default = 0.5}}, function(v)
print(v.Slider)
end)



local slider = sector3.element('Slider', 'Field Of View', {default = {min = 20, max = 120, default = 70}}, function(v)
 local RunService = game:GetService("RunService")
 local function ChangeFOV()

 game.workspace.CurrentCamera.FieldOfView = v.Slider
  end


 RunService.RenderStepped:Connect(ChangeFOV)
end)
local button = sector3.element('Button', 'Remove Fog', nil, function()
local Lighting = game:GetService("Lighting")
local RunService = game:GetService("RunService")

local function removeFog()
Lighting.FogEnd = 100000
Lighting.FogStart = 0
end


RunService.RenderStepped:Connect(removeFog)
end)

local toggle = sector.element('Toggle', 'Fullbright', false, function(v)
loadstring(game:HttpGet("https://raw.githubusercontent.com/Winnex-pub/wn/main/tewtgen.txt"))()
end)
local section = tab.new_section('World')

local sector = section.new_sector('World color', 'Left')
local sector1 = section.new_sector('World time', 'Right')

local RunService = game:GetService("RunService")

local function changeWorldColor(color)
game.Lighting.Ambient = color
game.Lighting.OutdoorAmbient = color
game.Lighting.ColorShift_Top = color
game.Lighting.ColorShift_Bottom = color
end

local function resetWorldColor()
local defaultColor = Color3.fromRGB(255, 255, 255)
game.Lighting.Ambient = defaultColor
game.Lighting.OutdoorAmbient = defaultColor
game.Lighting.ColorShift_Top = defaultColor
game.Lighting.ColorShift_Bottom = defaultColor
end

local worldColorToggleState = false
local selectedColor = Color3.fromRGB(84, 101, 255)  

local toggle = sector.element('Toggle', 'Toggle', false, function(v)
worldColorToggleState = v.Toggle
print("Toggle State: ", v.Toggle)
end)

toggle:add_color({Color = selectedColor}, nil, function(v)
selectedColor = v.Color
print("Selected Color: ", selectedColor)
end)

local worldTimeToggleState = false

local toggle1 = sector1.element('Toggle', 'Toggle', false, function(v)
worldTimeToggleState = v.Toggle
print("Time Toggle State: ", v.Toggle)
end)

local selectedTime = 20
local slider = sector1.element('Slider', 'Time', {default = {min = 1, max = 24, default = selectedTime}}, function(v)
selectedTime = v.Slider
print("Time: ", selectedTime)
end)


RunService.RenderStepped:Connect(function()
if worldColorToggleState then
changeWorldColor(selectedColor)
else
resetWorldColor()
end

if worldTimeToggleState then
game.Lighting.ClockTime = selectedTime
end
end)
